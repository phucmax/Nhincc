import discord
from discord.ext import commands
from discord import app_commands
import random, json, os, datetime
from flask import Flask
from threading import Thread

# ====== ENV ======
TOKEN = os.getenv("TOKEN") or "YOUR_DISCORD_BOT_TOKEN"

money_file = "money.json"
daily_file = "daily.json"

# ====== T·∫†O FILE N·∫æU CH∆ØA C√ì ======
for file in [money_file, daily_file]:
    if not os.path.exists(file):
        with open(file, "w") as f:
            json.dump({}, f)

# ====== H√ÄM X·ª¨ L√ù TI·ªÄN ======
def get_money(uid):
    with open(money_file, "r") as f:
        data = json.load(f)
    return data.get(str(uid), 1000)

def update_money(uid, amount):
    with open(money_file, "r") as f:
        data = json.load(f)
    data[str(uid)] = data.get(str(uid), 1000) + amount
    with open(money_file, "w") as f:
        json.dump(data, f)

def set_money(uid, amount):
    with open(money_file, "r") as f:
        data = json.load(f)
    data[str(uid)] = amount
    with open(money_file, "w") as f:
        json.dump(data, f)

def get_all_money():
    with open(money_file, "r") as f:
        return json.load(f)

def get_daily(uid):
    with open(daily_file, "r") as f:
        return json.load(f).get(str(uid), "")

def set_daily(uid, date):
    with open(daily_file, "r") as f:
        data = json.load(f)
    data[str(uid)] = date
    with open(daily_file, "w") as f:
        json.dump(data, f)

# ====== KH·ªûI T·∫†O BOT ======
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ Bot online: {bot.user} | Slash commands: {len(synced)} l·ªánh")
    except Exception as e:
        print(f"‚ùå Sync l·ªói: {e}")

# ====== L·ªÜNH MINI GAME ======

@bot.tree.command(name="money", description="Xem s·ªë ti·ªÅn b·∫°n ƒëang c√≥")
async def money(interaction: discord.Interaction):
    amount = get_money(interaction.user.id)
    await interaction.response.send_message(f"üí∞ B·∫°n c√≥ **{amount}** xu.")

@bot.tree.command(name="tai_xiu", description="Ch∆°i t√†i x·ªâu (min 100 xu)")
@app_commands.describe(choice="Ch·ªçn t√†i ho·∫∑c x·ªâu", bet="S·ªë ti·ªÅn c∆∞·ª£c")
async def tai_xiu(interaction: discord.Interaction, choice: str, bet: int):
    uid = interaction.user.id
    choice = choice.lower()
    if choice not in ["t√†i", "x·ªâu"] or bet < 100:
        await interaction.response.send_message("‚ùå C√∫ ph√°p sai ho·∫∑c c∆∞·ª£c √≠t nh·∫•t 100 xu!", ephemeral=True)
        return
    if get_money(uid) < bet:
        await interaction.response.send_message("‚ùå Kh√¥ng ƒë·ªß ti·ªÅn!", ephemeral=True)
        return
    dice = [random.randint(1, 6) for _ in range(3)]
    total = sum(dice)
    result = "t√†i" if total >= 11 else "x·ªâu"
    msg = f"üé≤ {dice} ‚Üí **{total}** ‚Üí **{result.upper()}**\n"
    if result == choice:
        update_money(uid, bet)
        msg += f"‚úÖ B·∫°n th·∫Øng! +{bet} xu."
    else:
        update_money(uid, -bet)
        msg += f"‚ùå B·∫°n thua! -{bet} xu."
    await interaction.response.send_message(msg)

@bot.tree.command(name="bau_cua", description="Ch∆°i b·∫ßu cua")
@app_commands.describe(chon="Ch·ªçn: b·∫ßu, cua, t√¥m, c√°, g√†, nai", cuoc="S·ªë ti·ªÅn c∆∞·ª£c")
async def bau_cua(interaction: discord.Interaction, chon: str, cuoc: int):
    uid = interaction.user.id
    chon = chon.lower()
    ds = ["b·∫ßu", "cua", "t√¥m", "c√°", "g√†", "nai"]
    if chon not in ds or cuoc < 100:
        await interaction.response.send_message("‚ùå Sai l·ª±a ch·ªçn ho·∫∑c c∆∞·ª£c qu√° √≠t!", ephemeral=True)
        return
    if get_money(uid) < cuoc:
        await interaction.response.send_message("‚ùå Kh√¥ng ƒë·ªß ti·ªÅn!", ephemeral=True)
        return
    kq = [random.choice(ds) for _ in range(3)]
    tr√∫ng = kq.count(chon)
    update_money(uid, -cuoc)
    if tr√∫ng > 0:
        update_money(uid, cuoc * tr√∫ng)
    msg = f"üé∞ K·∫øt qu·∫£: {' | '.join(kq)}\n"
    msg += f"‚úÖ Tr√∫ng {tr√∫ng} l·∫ßn! Nh·∫≠n **{cuoc * tr√∫ng}** xu." if tr√∫ng else f"‚ùå Kh√¥ng tr√∫ng! M·∫•t {cuoc} xu."
    await interaction.response.send_message(msg)

@bot.tree.command(name="xi_dach", description="Ch∆°i X√¨ D√°ch v·ªõi bot")
@app_commands.describe(cuoc="S·ªë ti·ªÅn c∆∞·ª£c")
async def xi_dach(interaction: discord.Interaction, cuoc: int):
    uid = interaction.user.id
    if cuoc < 100 or get_money(uid) < cuoc:
        await interaction.response.send_message("‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ho·∫∑c c∆∞·ª£c qu√° √≠t!", ephemeral=True)
        return
    deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4
    random.shuffle(deck)
    def r√∫t(): return deck.pop()
    def ƒëi·ªÉm(b√†i):
        total = sum(b√†i)
        while total > 21 and 11 in b√†i:
            b√†i[b√†i.index(11)] = 1
            total = sum(b√†i)
        return total
    user = [r√∫t(), r√∫t()]
    bot_cards = [r√∫t(), r√∫t()]
    while ƒëi·ªÉm(bot_cards) < 17: bot_cards.append(r√∫t())
    utotal = ƒëi·ªÉm(user)
    btotal = ƒëi·ªÉm(bot_cards)
    msg = f"üÉè B·∫°n: {user} ({utotal})\nü§ñ Bot: {bot_cards} ({btotal})\n"
    if utotal > 21:
        update_money(uid, -cuoc)
        msg += f"‚ùå B·∫°n qu·∫Øc! -{cuoc} xu."
    elif btotal > 21 or utotal > btotal:
        update_money(uid, cuoc)
        msg += f"‚úÖ B·∫°n th·∫Øng! +{cuoc} xu."
    elif utotal < btotal:
        update_money(uid, -cuoc)
        msg += f"‚ùå Bot th·∫Øng! -{cuoc} xu."
    else:
        msg += f"‚öñÔ∏è H√≤a ti·ªÅn."
    await interaction.response.send_message(msg)

# ====== TI·ªÄN T·ªÜ & ADMIN ======

@bot.tree.command(name="give_money", description="T·∫∑ng ti·ªÅn cho ng∆∞·ªùi kh√°c")
@app_commands.describe(user="Ng∆∞·ªùi nh·∫≠n", amount="S·ªë ti·ªÅn t·∫∑ng")
async def give_money(interaction: discord.Interaction, user: discord.User, amount: int):
    uid = interaction.user.id
    if amount <= 0 or get_money(uid) < amount:
        await interaction.response.send_message("‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ho·∫∑c s·ªë √¢m!", ephemeral=True)
        return
    update_money(uid, -amount)
    update_money(user.id, amount)
    await interaction.response.send_message(f"üéÅ {interaction.user.mention} ƒë√£ t·∫∑ng **{amount}** xu cho {user.mention}!")

@bot.tree.command(name="top_money", description="Top 5 ng∆∞·ªùi nhi·ªÅu ti·ªÅn nh·∫•t")
async def top_money(interaction: discord.Interaction):
    all_money = get_all_money()
    top = sorted(all_money.items(), key=lambda x: x[1], reverse=True)[:5]
    msg = "üí∏ **Top 5 gi√†u nh·∫•t:**\n"
    for i, (uid, amount) in enumerate(top, 1):
        try:
            user = await bot.fetch_user(int(uid))
            msg += f"**#{i}** {user.mention} ‚Äî {amount} xu\n"
        except: continue
    await interaction.response.send_message(msg)

@bot.tree.command(name="nhiem_vu", description="Nh·∫≠n nhi·ªám v·ª• m·ªói ng√†y")
async def nhiem_vu(interaction: discord.Interaction):
    uid = interaction.user.id
    today = datetime.date.today().isoformat()
    if get_daily(uid) == today:
        await interaction.response.send_message("üìÖ B·∫°n ƒë√£ nh·∫≠n h√¥m nay r·ªìi!", ephemeral=True)
        return
    update_money(uid, 500)
    set_daily(uid, today)
    await interaction.response.send_message("‚úÖ Nh·∫≠n **500 xu** nhi·ªám v·ª• m·ªói ng√†y!")

@bot.tree.command(name="create_money", description="Admin t·∫°o ti·ªÅn")
@app_commands.describe(user="Ng∆∞·ªùi nh·∫≠n", amount="S·ªë xu t·∫°o")
async def create_money(interaction: discord.Interaction, user: discord.User, amount: int):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå Ch·ªâ admin!", ephemeral=True)
        return
    update_money(user.id, amount)
    await interaction.response.send_message(f"ü™ô ƒê√£ t·∫°o {amount} xu cho {user.mention}.")

@bot.tree.command(name="reset_money", description="Reset ti·ªÅn v·ªÅ 1000")
@app_commands.describe(user="Ng∆∞·ªùi ƒë∆∞·ª£c reset")
async def reset_money(interaction: discord.Interaction, user: discord.User):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå Admin m·ªõi ƒë∆∞·ª£c d√πng!", ephemeral=True)
        return
    set_money(user.id, 1000)
    await interaction.response.send_message(f"üîÑ ƒê√£ reset ti·ªÅn c·ªßa {user.mention} v·ªÅ 1000 xu.")

# ====== KEEP ALIVE (Replit) ======
app = Flask('')
@app.route('/')
def home():
    return "Bot is alive!"
def run(): app.run(host='0.0.0.0', port=8080)
def keep_alive(): Thread(target=run).start()

# ====== CH·∫†Y BOT ======
keep_alive()
bot.run(TOKEN)